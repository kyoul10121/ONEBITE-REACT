//1. 함수 표현식
function funcA(){
    console.log("funcA");
}

let varA = funcA;
console.log(varA);      //자스에서는 함수도 숫자나 문자열과 같은 하나의 값으로서 취급하기 때문에 이런식으로 함수 자체를 변수에다가 담아놓을 수도 있습니다.
varA(); //이렇게 함수를 어떤 변수에 담게되면 funcA라는 함수를 이 변수의 이름으로 호출해 줄 수 있다. 

//이런 자스의 특징을 이용하면 우리가 함수를 굳이 선언하지않고 그냥 변수에 담듯이 함수를 바로 만들어버리는 것 또한 가능하다. 
let varB = function funcB() {
    console.log("funcB");
}
varB();
funcB(); //오류발생

//위에서 funcB는 선언식이 아니다. 왜냐하면 선언식이라는 것은 어떤 변수의 값으로 담기지 않은 상태로 유지가 되어야하는 것이라서
//이것은 값으로써 함수가 생성된 것이기 때문에 이 함수의 이름으로는 함수의 호출이 불가능하다. 이런 함수는 생성할 때 이름 생략해도 전혀 문제가 되지않는다.
//그래서 이름이 없는 함수를 익명함수라고 한다. 
//함수표현식으로 만든 함수들은 값으로써의 취급이되기 때문에 호이스팅의 대상이 되지않는다.

//2. 화살표함수
//function을 지우고 소괄호와 중괄호 안에 화살표를 넣어준다. 
let varC = () => {
    return 1;
}; 
//단축버전 : 위에서와 똑같이 1을 반환하는 함수다.
let varD = () => 1;

//위에서 매개변수가 필요하다면 소괄호안에 선언해주면 된다.
let varE = (value) => {
    console.log(value);
    return value + 1;
};
console.log(varE(10));