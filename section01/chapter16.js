//1. 상수 객체
const animal = {
    type : '고양이',
    name : '나비',
    color : 'black',
};

//animal = { a : 1 }; //상수인 animal에 또 다른 객체를 생성해서 할당하는 건 당연히 오류가 발생한다.
animal.age =2; //추가
animal.name = "까망이";  //수정
delete animal.color;  //삭제
//하지만 추가, 수정, 삭제는 가능하다. 이 이유는 상수라는 건 새로운 값을 할당하지 못하는 것을 말하는데 
//새로운 값을 할당해버리는 건 문제가 되지만 반면에 저장되어 있는 객체의 값의 프로퍼티를 수정하는 건 아무런 문제가 되지 않는다.
//그렇기 때문에 상수에다가 객체를 보관한다고 하더라도 프로퍼티를 추가하거나 삭제, 수정하는 조작은 얼마든지 가능하다.

//2. 메서드
//-> 값이 함수인 프로퍼티를 말함

const person = {
    name : "김윤일",
    //메서드 선언
    sayHi() {   //화살표 함수보다 더 단축된 메서드 선언, 이런 메서드들은 어덯게 선언이 되든 점,괄호 표기법으로 호출가능
        console.log("안녕!");
    },

};

person.sayHi(); 
//메서드는 함수이기 때문에 호출이 가능하다. 익명함수, 화살표 함수로도 만들 수 있다. 
//이런 메서드들은 이 객체의 동작을 정의하는 데에 사용된다. name과 같은 이런 함수가 아닌 프로퍼티들이 이 객체의 정보를 가지고 있다면 
//이런 함수 프로퍼티들은 메서드로써 객체의 동작을 정의한다.